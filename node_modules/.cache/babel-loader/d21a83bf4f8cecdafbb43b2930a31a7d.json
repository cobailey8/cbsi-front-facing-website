{"ast":null,"code":"var _jsxFileName = \"/Users/connor/Documents/React Projects/cbsi/src/components/ImageInfoBlock.js\";\nimport React, { useState, useEffect } from 'react';\nvar imageInfoBlock = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  padding: '6vw 3vw 3vw 3vw'\n};\nvar imgCont = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n};\nvar img = {\n  height: '27vw',\n  width: '40vw',\n  borderRadius: '3px'\n};\nvar textBl = {\n  flex: 2,\n  display: 'flex',\n  flexDirection: 'column',\n  textAlign: 'left',\n  padding: '0 3vw 3vw 3vw 3vw'\n};\nvar headerContBlock = {\n  fontSize: '3vw',\n  fontWeight: '400',\n  margin: '0 0 2.5vw 0',\n  padding: '0 0 0 1.2vw'\n};\nvar textContBlock = {\n  width: '90%',\n  height: '85%',\n  fontSize: '1.8vw',\n  fontWeight: '300',\n  display: 'flex',\n  margin: '0 0 0 2.3vw'\n};\n\nfunction ImageInfoBlock(props) {\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  const handleResize = () => {\n    setWindowWidth(window.innerWidth);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n  }, []); // Dark theme or light theme based on props. default is light.\n\n  var color = props.isDark ? {\n    background: 'rgba(63, 73, 83, 1)',\n    color: 'white'\n  } : {\n    background: '',\n    color: 'rgba(44,42,41)'\n  }; // Display right to left, or left to right based on the 'flip' prop. Also takes care of mobile styling\n\n  var flip;\n\n  if (windowWidth < 600) {\n    flip = {\n      flexDirection: 'column'\n    };\n    headerContBlock = {\n      display: 'flex',\n      justifyContent: 'center',\n      fontSize: '4vw',\n      fontWeight: '400',\n      margin: '2vw 0 1.5vw 0',\n      padding: '0 0 0 1.2vw'\n    };\n    textContBlock = {\n      fontSize: '2.5vw',\n      fontWeight: '300',\n      display: 'flex',\n      margin: '0 0 0 2.3vw'\n    };\n  } else if (props.flip) {\n    // 'flip' prop is true, and the row should be viewed in reverse.\n    flip = {\n      flexDirection: 'row-reverse'\n    };\n  } else {\n    // 'flip' prop is false, and the row should be viewed as is written naturally in JSX below\n    flip = {\n      flexDirection: 'row'\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: { ...imageInfoBlock,\n      ...color,\n      ...flip\n    },\n    className: \"imageInfoBlock\",\n    id: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: imgCont,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: props.image || './images/placeholder.jpg',\n    alt: props.headding,\n    style: img,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 36\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: textBl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: headerContBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, props.headerContent), /*#__PURE__*/React.createElement(\"div\", {\n    style: textContBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, props.textContent)));\n}\n\nexport default ImageInfoBlock;","map":{"version":3,"sources":["/Users/connor/Documents/React Projects/cbsi/src/components/ImageInfoBlock.js"],"names":["React","useState","useEffect","imageInfoBlock","display","flexDirection","justifyContent","padding","imgCont","alignItems","img","height","width","borderRadius","textBl","flex","textAlign","headerContBlock","fontSize","fontWeight","margin","textContBlock","ImageInfoBlock","props","windowWidth","setWindowWidth","window","innerWidth","handleResize","addEventListener","color","isDark","background","flip","id","image","headding","headerContent","textContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nvar imageInfoBlock = {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    padding: '6vw 3vw 3vw 3vw',\n}\n\nvar imgCont = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n}\n\nvar img = {\n    height: '27vw',\n    width: '40vw',\n    borderRadius: '3px',\n}\n\nvar textBl = {\n    flex: 2,\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign: 'left',\n    padding: '0 3vw 3vw 3vw 3vw',\n}\n\nvar headerContBlock = {\n    fontSize: '3vw',\n    fontWeight: '400',\n    margin: '0 0 2.5vw 0',\n    padding: '0 0 0 1.2vw',\n\n}\n\nvar textContBlock = {\n    width: '90%',\n    height: '85%',\n    fontSize: '1.8vw',\n    fontWeight: '300',\n    display: 'flex',\n    margin: '0 0 0 2.3vw',\n}\n\nfunction ImageInfoBlock(props) {\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n    const handleResize = () => {\n        setWindowWidth(window.innerWidth);\n    }\n\n    useEffect(() => {\n        window.addEventListener('resize', handleResize);\n    }, [])\n\n    // Dark theme or light theme based on props. default is light.\n    var color = props.isDark \n        ? { background: 'rgba(63, 73, 83, 1)', color: 'white' } \n        : { background: '', color: 'rgba(44,42,41)' };\n\n\n    // Display right to left, or left to right based on the 'flip' prop. Also takes care of mobile styling\n    var flip;\n    if(windowWidth < 600){\n\n        flip = { flexDirection: 'column'};\n\n        headerContBlock = {\n            display: 'flex',\n            justifyContent: 'center',\n            fontSize: '4vw',\n            fontWeight: '400',\n            margin: '2vw 0 1.5vw 0',\n            padding: '0 0 0 1.2vw',\n        \n        }\n\n        textContBlock = {\n            fontSize: '2.5vw',\n            fontWeight: '300',\n            display: 'flex',\n            margin: '0 0 0 2.3vw',\n        }\n\n    } else if(props.flip){  // 'flip' prop is true, and the row should be viewed in reverse.\n        flip = { flexDirection: 'row-reverse'};\n    } else {    // 'flip' prop is false, and the row should be viewed as is written naturally in JSX below\n        flip = { flexDirection: 'row' };\n    }\n\n    return (\n        <div style={ {...imageInfoBlock, ...color, ...flip} } className=\"imageInfoBlock\" id={props.id}>\n            <div style={ imgCont }><img src={ props.image || './images/placeholder.jpg' } alt={props.headding} style={ img } /></div>\n            <div style={ textBl }>\n                <div style={headerContBlock}>\n                    {props.headerContent}\n                </div>\n                <div style={textContBlock}>\n                    {props.textContent}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ImageInfoBlock;\n"]},"metadata":{},"sourceType":"module"}