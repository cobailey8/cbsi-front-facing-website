{"ast":null,"code":"var _jsxFileName = \"/Users/connor/Documents/cbsi-front-facing-website/src/components/ImageInfoBlock.js\";\nimport React, { useState, useEffect } from 'react';\nvar imageInfoBlock = {\n  padding: '6vw 3vw 3vw 3vw'\n};\nvar cont = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center'\n};\nvar imgCont = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n};\nvar img = {\n  height: '27vw',\n  width: '40vw',\n  borderRadius: '3px'\n};\nvar textBl = {\n  flex: 2,\n  display: 'flex',\n  flexDirection: 'column',\n  textAlign: 'left',\n  padding: '0 3vw 3vw 3vw 3vw'\n};\nvar headerContBlock = {\n  fontSize: '3vw',\n  fontWeight: '400',\n  margin: '0 0 2.5vw 0',\n  padding: '0 0 0 1.2vw'\n};\nvar textContBlock = {\n  width: '90%',\n  height: '85%',\n  fontSize: '1.8vw',\n  fontWeight: '300',\n  display: 'flex',\n  margin: '0 0 0 2.3vw'\n};\n\nfunction ImageInfoBlock(props) {\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  const handleResize = () => {\n    setWindowWidth(window.innerWidth);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n  }, []); // Dark theme or light theme based on props. default is light.\n\n  var color = props.isDark ? {\n    background: 'rgba(63, 73, 83, 1)',\n    color: 'white'\n  } : {\n    background: '',\n    color: 'rgba(44,42,41)'\n  };\n  imageInfoBlock = { ...imageInfoBlock,\n    ...color\n  }; // Display right to left, or left to right based on the 'flip' prop. Also takes care of mobile styling\n\n  var imgSm;\n  var headerContBlockSm;\n  var textContBlockSm;\n\n  if (windowWidth <= 600) {\n    // 'flip' prop doesn't matter here becauuse flexDirection has to be set to 'column'\n    cont = { ...cont,\n      flexDirection: 'column'\n    };\n    imgSm = {\n      width: '100%',\n      borderRadius: '7px'\n    };\n    headerContBlockSm = {\n      display: 'flex',\n      justifyContent: 'center',\n      fontSize: '4.5vw',\n      fontWeight: '400',\n      letterSpacing: '2px',\n      margin: '3vw 0 2vw 0'\n    };\n    textContBlockSm = {\n      fontSize: '2.8vw',\n      fontWeight: '400',\n      margin: '0 3vw',\n      letterSpacing: '.3vw'\n    };\n  } else if (windowWidth > 600 && windowWidth < 1280) {\n    if (props.flip) {\n      // 'flip' prop is true, and the row should be viewed in reverse.\n      cont = { ...cont,\n        flexDirection: 'row-reverse'\n      };\n    } else {\n      // 'flip' prop is false, and the row should be viewed as is written naturally in JSX below\n      cont = { ...cont,\n        flexDirection: 'row'\n      };\n    }\n  } else if (windowWidth > 1280) {}\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: imageInfoBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: cont,\n    className: \"imageInfoBlock\",\n    id: \"find\" + props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: imgCont,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: props.image || './images/placeholder.jpg',\n    alt: props.headding,\n    style: imgSm || img,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 40\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: textBl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: headerContBlockSm || headerContBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  }, props.headerContent), /*#__PURE__*/React.createElement(\"div\", {\n    style: textContBlockSm || textContBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, props.textContent))));\n}\n\nexport default ImageInfoBlock;","map":{"version":3,"sources":["/Users/connor/Documents/cbsi-front-facing-website/src/components/ImageInfoBlock.js"],"names":["React","useState","useEffect","imageInfoBlock","padding","cont","display","flexDirection","justifyContent","imgCont","alignItems","img","height","width","borderRadius","textBl","flex","textAlign","headerContBlock","fontSize","fontWeight","margin","textContBlock","ImageInfoBlock","props","windowWidth","setWindowWidth","window","innerWidth","handleResize","addEventListener","color","isDark","background","imgSm","headerContBlockSm","textContBlockSm","letterSpacing","flip","id","image","headding","headerContent","textContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nvar imageInfoBlock = {\n    padding: '6vw 3vw 3vw 3vw',\n}\n\nvar cont = {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n}\n\nvar imgCont = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n}\n\nvar img = {\n    height: '27vw',\n    width: '40vw',\n    borderRadius: '3px',\n}\n\nvar textBl = {\n    flex: 2,\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign: 'left',\n    padding: '0 3vw 3vw 3vw 3vw',\n}\n\nvar headerContBlock = {\n    fontSize: '3vw',\n    fontWeight: '400',\n    margin: '0 0 2.5vw 0',\n    padding: '0 0 0 1.2vw',\n\n}\n\nvar textContBlock = {\n    width: '90%',\n    height: '85%',\n    fontSize: '1.8vw',\n    fontWeight: '300',\n    display: 'flex',\n    margin: '0 0 0 2.3vw',\n}\n\nfunction ImageInfoBlock(props) {\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n    const handleResize = () => {\n        setWindowWidth(window.innerWidth);\n    }\n\n    useEffect(() => {\n        window.addEventListener('resize', handleResize);\n    }, [])\n\n    // Dark theme or light theme based on props. default is light.\n    var color = props.isDark \n        ? { background: 'rgba(63, 73, 83, 1)', color: 'white' } \n        : { background: '', color: 'rgba(44,42,41)' };\n    \n    imageInfoBlock = {\n        ...imageInfoBlock,\n        ...color\n    }\n\n\n    // Display right to left, or left to right based on the 'flip' prop. Also takes care of mobile styling\n    var imgSm;\n    var headerContBlockSm;\n    var textContBlockSm;\n    if(windowWidth <= 600){  // 'flip' prop doesn't matter here becauuse flexDirection has to be set to 'column'\n\n        cont = { ...cont, flexDirection: 'column' };\n\n        imgSm = {\n            width: '100%',\n            borderRadius: '7px',\n        }\n\n        headerContBlockSm = {\n            display: 'flex',\n            justifyContent: 'center',\n            fontSize: '4.5vw',\n            fontWeight: '400',\n            letterSpacing: '2px',\n            margin: '3vw 0 2vw 0',\n        \n        }\n\n        textContBlockSm = {\n            fontSize: '2.8vw',\n            fontWeight: '400',\n            margin: '0 3vw',\n            letterSpacing: '.3vw',\n        }\n\n    } else if(windowWidth > 600 && windowWidth < 1280){\n    \n        if(props.flip){  // 'flip' prop is true, and the row should be viewed in reverse.\n            cont = { ...cont, flexDirection: 'row-reverse' };\n        } else {    // 'flip' prop is false, and the row should be viewed as is written naturally in JSX below\n            cont = { ...cont, flexDirection: 'row' };\n        }\n        \n    }else if(windowWidth > 1280){\n\n    }\n\n    return (\n        <div style={ imageInfoBlock }>\n            <div style={ cont } className=\"imageInfoBlock\" id={\"find\"+props.id}>\n                <div style={ imgCont }><img src={ props.image || './images/placeholder.jpg' } alt={props.headding} style={ imgSm || img } /></div>\n                <div style={ textBl }>\n                    <div style={headerContBlockSm || headerContBlock}>\n                        {props.headerContent}\n                    </div>\n                    <div style={textContBlockSm || textContBlock}>\n                        {props.textContent}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ImageInfoBlock;\n"]},"metadata":{},"sourceType":"module"}