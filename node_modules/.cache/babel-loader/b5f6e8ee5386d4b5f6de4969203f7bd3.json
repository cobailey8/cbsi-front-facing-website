{"ast":null,"code":"import _objectSpread from\"/Users/connor/Documents/React Projects/cbsi/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/connor/Documents/React Projects/cbsi/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';var imageInfoBlock={display:'flex',flexDirection:'column',justifyContent:'center',padding:'6vw 3vw 3vw 3vw'};var imgCont={display:'flex',justifyContent:'center',alignItems:'center'};var img={height:'27vw',width:'40vw',borderRadius:'3px'};var textBl={flex:2,display:'flex',flexDirection:'column',textAlign:'left',padding:'0 3vw 3vw 3vw 3vw'};var headerContBlock={fontSize:'3vw',fontWeight:'400',margin:'0 0 2.5vw 0',padding:'0 0 0 1.2vw'};var textContBlock={width:'90%',height:'85%',fontSize:'1.8vw',fontWeight:'300',display:'flex',margin:'0 0 0 2.3vw'};function ImageInfoBlock(props){var _useState=useState(window.innerWidth),_useState2=_slicedToArray(_useState,2),windowWidth=_useState2[0],setWindowWidth=_useState2[1];var handleResize=function handleResize(){setWindowWidth(window.innerWidth);};useEffect(function(){window.addEventListener('resize',handleResize);},[]);// Dark theme or light theme based on props. default is light.\nvar color=props.isDark?{background:'rgba(63, 73, 83, 1)',color:'white'}:{background:'',color:'rgba(44,42,41)'};// Display right to left, or left to right based on the 'flip' prop. Also takes care of mobile styling\nvar flip;var imgSm;var headerContBlockSm;var textContBlockSm;if(windowWidth<600){// 'flip' prop doesn't matter here becauuse flexDirection has to be set to 'column'\nflip={flexDirection:'column'};imgSm={width:'100%',borderRadius:'7px'};headerContBlockSm={display:'flex',justifyContent:'center',fontSize:'4.5vw',fontWeight:'400',letterSpacing:'2px',margin:'20px 0 0 0'};textContBlockSm={fontSize:'2.8vw',fontWeight:'300',margin:'0 3vw',letterSpacing:'.3vw'};}else if(props.flip){// 'flip' prop is true, and the row should be viewed in reverse.\nflip={flexDirection:'row-reverse'};}else{// 'flip' prop is false, and the row should be viewed as is written naturally in JSX below\nflip={flexDirection:'row'};}return/*#__PURE__*/React.createElement(\"div\",{style:_objectSpread(_objectSpread(_objectSpread({},imageInfoBlock),color),flip),className:\"imageInfoBlock\",id:\"find\"+props.id},/*#__PURE__*/React.createElement(\"div\",{style:imgCont},/*#__PURE__*/React.createElement(\"img\",{src:props.image||'./images/placeholder.jpg',alt:props.headding,style:imgSm||img})),/*#__PURE__*/React.createElement(\"div\",{style:textBl},/*#__PURE__*/React.createElement(\"div\",{style:headerContBlockSm||headerContBlock},props.headerContent),/*#__PURE__*/React.createElement(\"div\",{style:textContBlockSm||textContBlock},props.textContent)));}export default ImageInfoBlock;","map":{"version":3,"sources":["/Users/connor/Documents/React Projects/cbsi/src/components/ImageInfoBlock.js"],"names":["React","useState","useEffect","imageInfoBlock","display","flexDirection","justifyContent","padding","imgCont","alignItems","img","height","width","borderRadius","textBl","flex","textAlign","headerContBlock","fontSize","fontWeight","margin","textContBlock","ImageInfoBlock","props","window","innerWidth","windowWidth","setWindowWidth","handleResize","addEventListener","color","isDark","background","flip","imgSm","headerContBlockSm","textContBlockSm","letterSpacing","id","image","headding","headerContent","textContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nvar imageInfoBlock = {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    padding: '6vw 3vw 3vw 3vw',\n}\n\nvar imgCont = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n}\n\nvar img = {\n    height: '27vw',\n    width: '40vw',\n    borderRadius: '3px',\n}\n\nvar textBl = {\n    flex: 2,\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign: 'left',\n    padding: '0 3vw 3vw 3vw 3vw',\n}\n\nvar headerContBlock = {\n    fontSize: '3vw',\n    fontWeight: '400',\n    margin: '0 0 2.5vw 0',\n    padding: '0 0 0 1.2vw',\n\n}\n\nvar textContBlock = {\n    width: '90%',\n    height: '85%',\n    fontSize: '1.8vw',\n    fontWeight: '300',\n    display: 'flex',\n    margin: '0 0 0 2.3vw',\n}\n\nfunction ImageInfoBlock(props) {\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n    const handleResize = () => {\n        setWindowWidth(window.innerWidth);\n    }\n\n    useEffect(() => {\n        window.addEventListener('resize', handleResize);\n    }, [])\n\n    // Dark theme or light theme based on props. default is light.\n    var color = props.isDark \n        ? { background: 'rgba(63, 73, 83, 1)', color: 'white' } \n        : { background: '', color: 'rgba(44,42,41)' };\n\n\n    // Display right to left, or left to right based on the 'flip' prop. Also takes care of mobile styling\n    var flip;\n    var imgSm;\n    var headerContBlockSm;\n    var textContBlockSm;\n    if(windowWidth < 600){  // 'flip' prop doesn't matter here becauuse flexDirection has to be set to 'column'\n\n        flip = { flexDirection: 'column'};\n\n        imgSm = {\n            width: '100%',\n            borderRadius: '7px',\n        }\n\n        headerContBlockSm = {\n            display: 'flex',\n            justifyContent: 'center',\n            fontSize: '4.5vw',\n            fontWeight: '400',\n            letterSpacing: '2px',\n            margin: '20px 0 0 0',\n        \n        }\n\n        textContBlockSm = {\n            fontSize: '2.8vw',\n            fontWeight: '300',\n            margin: '0 3vw',\n            letterSpacing: '.3vw',\n        }\n\n    } else if(props.flip){  // 'flip' prop is true, and the row should be viewed in reverse.\n        flip = { flexDirection: 'row-reverse'};\n    } else {    // 'flip' prop is false, and the row should be viewed as is written naturally in JSX below\n        flip = { flexDirection: 'row' };\n    }\n    \n    return (\n        <div style={ {...imageInfoBlock, ...color, ...flip} } className=\"imageInfoBlock\" id={\"find\"+props.id}>\n            <div style={ imgCont }><img src={ props.image || './images/placeholder.jpg' } alt={props.headding} style={ imgSm || img } /></div>\n            <div style={ textBl }>\n                <div style={headerContBlockSm || headerContBlock}>\n                    {props.headerContent}\n                </div>\n                <div style={textContBlockSm || textContBlock}>\n                    {props.textContent}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ImageInfoBlock;\n"]},"metadata":{},"sourceType":"module"}