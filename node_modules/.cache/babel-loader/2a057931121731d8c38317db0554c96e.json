{"ast":null,"code":"var _jsxFileName = \"/Users/connor/Documents/cbsi-front-facing-website/src/components/ResponsiveGrid.js\";\nimport React, { useState, useEffect } from 'react';\nimport ImageCard from './ImageCard';\nconst responsiveGrid = {\n  backgroundColor: 'rgba(63, 73, 83, 1)',\n  margin: 0,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n};\nconst cont = {\n  width: '100%'\n};\nconst heading = {\n  color: '#fff',\n  fontSize: '30px',\n  fontWeight: '400',\n  letterSpacing: '2px',\n  margin: '3vw 0 1vw 0',\n  WebkitTextStrokeWidth: '1px',\n  WebkitTextStrokeColor: '#eff',\n  textShadow: '1px 1px rgba( 0, 0, 0, .3 )'\n};\nconst body = {\n  display: 'grid',\n  gridTemplateColumns: 'repeat( auto-fit, minmax(300px, 1fr) )',\n  width: '100%'\n};\nconst gridItem = {\n  display: 'flex',\n  justifyContent: 'center',\n  // alignItems: 'center',\n  padding: '2vw 0'\n};\n\nfunction ResponsiveGrid(props) {\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  useEffect(() => {\n    function handleResize() {\n      setWindowWidth(window.innerWidth);\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  var dataArr = [];\n  Object.keys(props.jsonData).forEach(key => dataArr.push(props.jsonData[key]));\n  console.log(dataArr.length);\n  var headingR;\n  var contR;\n  var bodyR;\n\n  if (windowWidth < 600) {\n    headingR = {\n      color: '#fff',\n      fontSize: '4.5vw',\n      fontWeight: '400',\n      letterSpacing: '2px',\n      margin: '3vw 0 1vw 0',\n      WebkitTextStrokeWidth: '1px',\n      WebkitTextStrokeColor: '#eff',\n      textShadow: '1px 1px rgba( 0, 0, 0, .3 )'\n    };\n    bodyR = {\n      display: 'grid',\n      gridTemplateColumns: 'repeat( auto-fit, minmax(160px, 1fr) )',\n      width: '100%'\n    };\n  } else if (windowWidth > 1280) {\n    headingR = {\n      color: '#fff',\n      fontSize: '35px',\n      fontWeight: '400',\n      letterSpacing: '2px',\n      margin: '3vw 0 1vw 0',\n      WebkitTextStrokeWidth: '1px',\n      WebkitTextStrokeColor: '#eff',\n      textShadow: '1px 1px rgba( 0, 0, 0, .3 )'\n    };\n    contR = {\n      width: '75%'\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: responsiveGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: contR || cont,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: headingR || heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, props.heading), /*#__PURE__*/React.createElement(\"div\", {\n    style: bodyR || body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, //Output a Modal component for each object in dataArr\n  dataArr.map(item => /*#__PURE__*/React.createElement(\"div\", {\n    style: gridItem,\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(ImageCard, {\n    keyx: item.id,\n    image: item.image,\n    heading: item.heading,\n    text: item.text,\n    buttonTxt: item.buttonTxt,\n    link: item.link,\n    style: {\n      background: 'yellow'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }))))));\n}\n\nexport default ResponsiveGrid;","map":{"version":3,"sources":["/Users/connor/Documents/cbsi-front-facing-website/src/components/ResponsiveGrid.js"],"names":["React","useState","useEffect","ImageCard","responsiveGrid","backgroundColor","margin","display","justifyContent","alignItems","cont","width","heading","color","fontSize","fontWeight","letterSpacing","WebkitTextStrokeWidth","WebkitTextStrokeColor","textShadow","body","gridTemplateColumns","gridItem","padding","ResponsiveGrid","props","windowWidth","setWindowWidth","window","innerWidth","handleResize","addEventListener","removeEventListener","dataArr","Object","keys","jsonData","forEach","key","push","console","log","length","headingR","contR","bodyR","map","item","id","image","text","buttonTxt","link","background"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ImageCard from './ImageCard';\n\nconst responsiveGrid = {\n    backgroundColor: 'rgba(63, 73, 83, 1)',\n    margin: 0,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n}\n\nconst cont = {\n    width: '100%',\n}\n\nconst heading = {\n    color: '#fff',\n    fontSize: '30px',\n    fontWeight: '400',\n    letterSpacing: '2px',\n    margin: '3vw 0 1vw 0',\n    WebkitTextStrokeWidth: '1px',\n    WebkitTextStrokeColor: '#eff',\n    textShadow: '1px 1px rgba( 0, 0, 0, .3 )',\n}\n\nconst body = {\n    display: 'grid',\n    gridTemplateColumns: 'repeat( auto-fit, minmax(300px, 1fr) )',\n    width: '100%',\n}\n\nconst gridItem = {\n\n    display: 'flex',\n    justifyContent: 'center',\n    // alignItems: 'center',\n    padding: '2vw 0',\n}\n\nfunction ResponsiveGrid(props) {\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n    useEffect(() => {\n\n        function handleResize() {\n            setWindowWidth(window.innerWidth);\n        }\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        }\n\n    }, []);\n\n    var dataArr = [];\n    Object.keys(props.jsonData).forEach(key => dataArr.push(props.jsonData[key]));\nconsole.log(dataArr.length);\n    var headingR;\n    var contR;\n    var bodyR;\n    if(windowWidth < 600) {\n\n        headingR = {\n            color: '#fff',\n            fontSize: '4.5vw',\n            fontWeight: '400',\n            letterSpacing: '2px',\n            margin: '3vw 0 1vw 0',\n            WebkitTextStrokeWidth: '1px',\n            WebkitTextStrokeColor: '#eff',\n            textShadow: '1px 1px rgba( 0, 0, 0, .3 )',\n        }\n\n        bodyR = {\n            display: 'grid',\n            gridTemplateColumns: 'repeat( auto-fit, minmax(160px, 1fr) )',\n            width: '100%',\n        }\n\n    }else if(windowWidth > 1280){\n        headingR = {\n            color: '#fff',\n            fontSize: '35px',\n            fontWeight: '400',\n            letterSpacing: '2px',\n            margin: '3vw 0 1vw 0',\n            WebkitTextStrokeWidth: '1px',\n            WebkitTextStrokeColor: '#eff',\n            textShadow: '1px 1px rgba( 0, 0, 0, .3 )',\n        }\n        contR = {\n            width: '75%',\n        }\n    }\n\n    return (\n        <div style={ responsiveGrid } >\n            <div style={contR || cont}>\n                <div style={ headingR || heading }>{props.heading}</div>\n                <div style={ bodyR || body }>\n                {\n                    //Output a Modal component for each object in dataArr\n                    dataArr.map(item => \n                        <div style={ gridItem } key={ item.id }>\n                            <ImageCard \n                                keyx={ item.id }\n                                image={ item.image } \n                                heading={ item.heading } \n                                text={ item.text } \n                                buttonTxt={ item.buttonTxt } \n                                link={ item.link }\n                                style={ {background: 'yellow'} }\n                            />\n                        </div>\n                    )\n                }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ResponsiveGrid;\n"]},"metadata":{},"sourceType":"module"}