{"version":3,"file":"index.umd.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/deepMerge.ts","../src/utils/isSameError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isBoolean.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/deepEqual.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/onDomRemove.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject((unmountFieldsStateRef || {}).current || {}),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      target[key] = sourceValue;\n    }\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(object1: any = [], object2: any = []) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n\n    if (\n      (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n        ? !deepEqual(val1, val2)\n        : val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './logic/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const modeRef = React.useRef(modeChecker(mode));\n  const {\n    current: { isOnSubmit, isOnAll },\n  } = modeRef;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(\n    () => !isUnMount.current && render({}),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = String(\n                  value as string | boolean,\n                ).includes(checkboxRef.value)),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          !deepEqual(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      if (!shouldUnregister) {\n        unmountFieldsStateRef.current[name] = value;\n      }\n\n      return true;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          name === '' ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation =\n            !isOnAll &&\n            skipValidation({\n              isBlurEvent,\n              isReValidateOnChange,\n              isReValidateOnBlur,\n              isSubmitted: isSubmittedRef.current,\n              ...modeRef.current,\n            });\n          let shouldRender = setDirty(name) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(touchedFieldsRef.current, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(touchedFieldsRef.current, name, true);\n            shouldRender = true;\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return shouldRender && reRender();\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = isValidRef.current;\n            isValidRef.current = isEmptyObject(errors);\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            if (previousFormIsValid !== isValidRef.current) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n\n          if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n            reRender();\n          }\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getFieldValue(fieldsRef, name, unmountFieldsStateRef),\n        }),\n        {},\n      );\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n\n          [fieldsWithValidationRef, validFieldsRef].forEach((data) =>\n            data.current.delete(field.ref.name),\n          );\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn('📋 Field is missing `name` attribute:', ref);\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+]\\.\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\". https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                unset(errorsRef.current, name);\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined as any;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport isObject from './utils/isObject';\nimport deepEqual from './logic/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useFieldArray is missing `control` prop.');\n    }\n\n    if (!name) {\n      console.warn('📋 useFieldArray is missing `name` attribute.');\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...(get(fieldArrayDefaultValues.current, name) ||\n      get(defaultValuesRef.current, name) ||\n      []),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setField] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const rootParentName = getFieldArrayParentName(name);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValues.current, name) && rootParentName) {\n    set(\n      fieldArrayDefaultValues.current,\n      rootParentName,\n      get(defaultValuesRef.current, rootParentName),\n    );\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues,\n      });\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender?: boolean) => {\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty ||\n      readFormStateRef.current.isValid\n    ) {\n      shouldRender = true;\n    }\n\n    renderWatchedInputs(name);\n\n    shouldRender && !isWatchAllRef.current && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ) => {\n    if (\n      readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields\n    ) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        !deepEqual(\n          flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(dirtyFieldsRef.current, name, [\n        ...(get(dirtyFieldsRef.current, name) ||\n          fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ]);\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        prependAt(get(errorsRef.current, name), emptyArray),\n      );\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      set(\n        touchedFieldsRef.current,\n        name,\n        prependAt(get(touchedFieldsRef.current, name), emptyArray),\n      );\n      shouldRender = true;\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        dirtyFieldsRef.current,\n        name,\n        prependAt(\n          get(dirtyFieldsRef.current, name) || [],\n          filterBooleanArray(value),\n        ),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields(removeArrayAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        removeArrayAt(get(errorsRef.current, name), index),\n      );\n\n      if (!unique(get(errorsRef.current, name, [])).length) {\n        unset(errorsRef.current, name);\n      }\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      set(\n        touchedFieldsRef.current,\n        name,\n        removeArrayAt(get(touchedFieldsRef.current, name), index),\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      set(\n        dirtyFieldsRef.current,\n        name,\n        removeArrayAt(get(dirtyFieldsRef.current, name), index),\n      );\n\n      if (!unique(get(dirtyFieldsRef.current, name, [])).length) {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields(insertAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        insertAt(get(errorsRef.current, name), index, emptyArray),\n      );\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      set(\n        touchedFieldsRef.current,\n        name,\n        insertAt(get(touchedFieldsRef.current, name), index, emptyArray),\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      set(\n        dirtyFieldsRef.current,\n        name,\n        insertAt(\n          get(dirtyFieldsRef.current, name),\n          index,\n          filterBooleanArray(value),\n        ),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      swapArrayAt(get(errorsRef.current, name), indexA, indexB);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      swapArrayAt(get(touchedFieldsRef.current, name), indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      swapArrayAt(get(dirtyFieldsRef.current, name), indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      moveArrayAt(get(errorsRef.current, name), from, to);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      moveArrayAt(get(touchedFieldsRef.current, name), from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      moveArrayAt(get(dirtyFieldsRef.current, name), from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    const defaultValues = get(fieldArrayDefaultValues.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValues.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNamesRef.current.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production' && !control && !methods) {\n    throw new Error('📋 Controller is missing `control` prop.');\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n  const isSubmitted = isSubmittedRef.current;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isUndefined(value)) {\n      console.warn(\n        '📋 Controller `defaultValue` or useForm `defaultValues` is missing.',\n      );\n    }\n\n    if (as && render) {\n      console.warn('📋 Should use either `as` or `render` prop.');\n    }\n\n    if (!isNotFieldArray && isUndefined(defaultValue)) {\n      console.warn(\n        '📋 Controller is missing `defaultValue` prop when using `useFieldArray`.',\n      );\n    }\n  }\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn('📋 Field is missing `name` prop.');\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: () => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useWatch is missing `control` prop.');\n    }\n\n    if (name === '') {\n      console.warn('📋 useWatch is missing `name` attribute.');\n    }\n  }\n\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(\n    () => setValue(watchInternal(name, defaultValueRef.current, idRef.current)),\n    [setValue, watchInternal, defaultValueRef, name, idRef],\n  );\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","[object Object]","val","undefined","filter","Boolean","obj","defaultValue","unique","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","field","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isSameRef","fieldValue","search","output","isString","startsWith","find","deepMerge","target","source","targetValue","sourceValue","transformToNestObject","error","types","message","every","RegExp","validationData","isValueMessage","isRegex","isValidElement","getValidateError","isMessage","isBoolean","validateAllFieldCriteria","errors","async","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","getValueAndMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","getPath","pathWithIndex","isPrimitive","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","get","forEach","isOnBlur","isOnChange","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","deepEqual","object1","object2","keys1","keys2","val1","val2","isMatchFieldArrayName","searchName","names","some","mode","isOnSubmit","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","filterBooleanArray","appendId","keyName","generateId","mapIds","_a","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","reValidateMode","isSubmittedRef","touchedFieldsRef","readFormStateRef","reRender","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","touched","onChange","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","errorsRef","dirtyFieldsRef","isDirtyRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateSchemaIsValid","renderWatchedInputs","getValues","shouldRender","getDefaultValues","memoizedDefaultValues","setField","allFields","rootParentName","getFieldArrayParentName","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","shouldRenderFieldArray","dirtyFields","isDirty","resetFields","flagOrFields","_b","reset","defaultValues","pop","shouldRenderUseWatch","watchField","resetFunctions","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","fieldIndex","isFound","isIndexUndefined","isLast","isCurrentIndex","currentFieldName","previousFieldName","has","insertAt","resolver","context","shouldFocusError","shouldUnregister","criteriaMode","Set","watchFieldsHookRef","watchFieldsHookRenderRef","isValidRef","defaultValuesAtRenderRef","isUnMount","submitCountRef","isSubmittingRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","shouldRenderBaseOnError","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","String","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","Promise","all","setInternalValues","setInternalValue","config","isFieldWatched","found","size","getFieldsValues","shouldSkipValidation","validateResolver","forceDelete","handleChange","mutationWatcher","fieldRef","removeAllEventListeners","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","onDomRemove","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","callback","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","formState","commonProps","refOrValidationOptions","prop","watch","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}