{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/deepMerge.ts","../src/utils/isSameError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isBoolean.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/deepEqual.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/onDomRemove.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject((unmountFieldsStateRef || {}).current || {}),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      target[key] = sourceValue;\n    }\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(object1: any = [], object2: any = []) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n\n    if (\n      (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n        ? !deepEqual(val1, val2)\n        : val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './logic/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const modeRef = React.useRef(modeChecker(mode));\n  const {\n    current: { isOnSubmit, isOnAll },\n  } = modeRef;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(\n    () => !isUnMount.current && render({}),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = String(\n                  value as string | boolean,\n                ).includes(checkboxRef.value)),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          !deepEqual(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      if (!shouldUnregister) {\n        unmountFieldsStateRef.current[name] = value;\n      }\n\n      return true;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          name === '' ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation =\n            !isOnAll &&\n            skipValidation({\n              isBlurEvent,\n              isReValidateOnChange,\n              isReValidateOnBlur,\n              isSubmitted: isSubmittedRef.current,\n              ...modeRef.current,\n            });\n          let shouldRender = setDirty(name) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(touchedFieldsRef.current, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(touchedFieldsRef.current, name, true);\n            shouldRender = true;\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return shouldRender && reRender();\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = isValidRef.current;\n            isValidRef.current = isEmptyObject(errors);\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            if (previousFormIsValid !== isValidRef.current) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n\n          if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n            reRender();\n          }\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getFieldValue(fieldsRef, name, unmountFieldsStateRef),\n        }),\n        {},\n      );\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n\n          [fieldsWithValidationRef, validFieldsRef].forEach((data) =>\n            data.current.delete(field.ref.name),\n          );\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn('📋 Field is missing `name` attribute:', ref);\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+]\\.\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\". https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                unset(errorsRef.current, name);\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined as any;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport isObject from './utils/isObject';\nimport deepEqual from './logic/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useFieldArray is missing `control` prop.');\n    }\n\n    if (!name) {\n      console.warn('📋 useFieldArray is missing `name` attribute.');\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...(get(fieldArrayDefaultValues.current, name) ||\n      get(defaultValuesRef.current, name) ||\n      []),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setField] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const rootParentName = getFieldArrayParentName(name);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValues.current, name) && rootParentName) {\n    set(\n      fieldArrayDefaultValues.current,\n      rootParentName,\n      get(defaultValuesRef.current, rootParentName),\n    );\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues,\n      });\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender?: boolean) => {\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty ||\n      readFormStateRef.current.isValid\n    ) {\n      shouldRender = true;\n    }\n\n    renderWatchedInputs(name);\n\n    shouldRender && !isWatchAllRef.current && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ) => {\n    if (\n      readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields\n    ) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        !deepEqual(\n          flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(dirtyFieldsRef.current, name, [\n        ...(get(dirtyFieldsRef.current, name) ||\n          fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ]);\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        prependAt(get(errorsRef.current, name), emptyArray),\n      );\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      set(\n        touchedFieldsRef.current,\n        name,\n        prependAt(get(touchedFieldsRef.current, name), emptyArray),\n      );\n      shouldRender = true;\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        dirtyFieldsRef.current,\n        name,\n        prependAt(\n          get(dirtyFieldsRef.current, name) || [],\n          filterBooleanArray(value),\n        ),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields(removeArrayAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        removeArrayAt(get(errorsRef.current, name), index),\n      );\n\n      if (!unique(get(errorsRef.current, name, [])).length) {\n        unset(errorsRef.current, name);\n      }\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      set(\n        touchedFieldsRef.current,\n        name,\n        removeArrayAt(get(touchedFieldsRef.current, name), index),\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      set(\n        dirtyFieldsRef.current,\n        name,\n        removeArrayAt(get(dirtyFieldsRef.current, name), index),\n      );\n\n      if (!unique(get(dirtyFieldsRef.current, name, [])).length) {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields(insertAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        insertAt(get(errorsRef.current, name), index, emptyArray),\n      );\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      set(\n        touchedFieldsRef.current,\n        name,\n        insertAt(get(touchedFieldsRef.current, name), index, emptyArray),\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      set(\n        dirtyFieldsRef.current,\n        name,\n        insertAt(\n          get(dirtyFieldsRef.current, name),\n          index,\n          filterBooleanArray(value),\n        ),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      swapArrayAt(get(errorsRef.current, name), indexA, indexB);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      swapArrayAt(get(touchedFieldsRef.current, name), indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      swapArrayAt(get(dirtyFieldsRef.current, name), indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      moveArrayAt(get(errorsRef.current, name), from, to);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      moveArrayAt(get(touchedFieldsRef.current, name), from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      moveArrayAt(get(dirtyFieldsRef.current, name), from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    const defaultValues = get(fieldArrayDefaultValues.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValues.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNamesRef.current.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production' && !control && !methods) {\n    throw new Error('📋 Controller is missing `control` prop.');\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n  const isSubmitted = isSubmittedRef.current;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isUndefined(value)) {\n      console.warn(\n        '📋 Controller `defaultValue` or useForm `defaultValues` is missing.',\n      );\n    }\n\n    if (as && render) {\n      console.warn('📋 Should use either `as` or `render` prop.');\n    }\n\n    if (!isNotFieldArray && isUndefined(defaultValue)) {\n      console.warn(\n        '📋 Controller is missing `defaultValue` prop when using `useFieldArray`.',\n      );\n    }\n  }\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn('📋 Field is missing `name` prop.');\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: () => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useWatch is missing `control` prop.');\n    }\n\n    if (name === '') {\n      console.warn('📋 useWatch is missing `name` attribute.');\n    }\n  }\n\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(\n    () => setValue(watchInternal(name, defaultValueRef.current, idRef.current)),\n    [setValue, watchInternal, defaultValueRef, name, idRef],\n  );\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","_Array$isArray","isObjectType","isNullOrUndefined","isArray","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","_reduceInstanceProperty","previous","_a","_c","__read","val","undefined","_filterInstanceProperty","Boolean","obj","defaultValue","unique","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","SELECT","defaultResult","validResult","values","_mapInstanceProperty","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","field","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","_Object$keys","unset","updatePath","childObject","_sliceInstanceProperty","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isSameRef","fieldValue","search","output","name_1","isString","_startsWithInstanceProperty","_findInstanceProperty","deepMerge","target","source","targetValue","sourceValue","transformToNestObject","error","_b","types","message","_everyInstanceProperty","RegExp","validationData","isRegex","isValidElement","getValidateError","isMessage","isBoolean","validateAllFieldCriteria","errors","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","_bindInstanceProperty","appendErrors","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","_parseFloat","valueDate","valueAsDate","Date","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_o","validateError","validationResult","_j","__values","_Object$entries","_l","validateFunction","validateResult","getPath","_flatInstanceProperty","pathWithIndex","isPrimitive","getInnerPath","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","get","isOnBlur","isOnChange","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","_indexOfInstanceProperty","deepEqual","object1","object2","keys1","keys2","keys1_1","val1","val2","isMatchFieldArrayName","searchName","names","_someInstanceProperty","mode","isOnSubmit","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","_Date$now","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","_spliceInstanceProperty","indexA","indexB","temp","prepend","insert","_fillInstanceProperty","Array","mapValueToBoolean","filterBooleanArray","appendId","keyName","generateId","mapIds","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","isSubmittedRef","touchedFieldsRef","readFormStateRef","reRender","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","_Object$defineProperty","focus","React.useEffect","onBlur","touched","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","shouldRender","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","errorsRef","dirtyFieldsRef","isDirtyRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateSchemaIsValid","renderWatchedInputs","getValues","getDefaultValues","memoizedDefaultValues","setField","allFields","rootParentName","getFieldArrayParentName","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","shouldRenderFieldArray","dirtyFields","isDirty","resetFields","flagOrFields","reset","defaultValues","pop","shouldRenderUseWatch","watchField","resetFunctions","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","fieldIndex","isFound","isIndexUndefined","isLast","isCurrentIndex","currentFieldName","previousFieldName","has","insertAt","reValidateMode","resolver","context","shouldFocusError","shouldUnregister","criteriaMode","watchFieldsHookRef","watchFieldsHookRenderRef","isValidRef","defaultValuesAtRenderRef","isUnMount","submitCountRef","isSubmittingRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","_k","shouldRenderBaseOnError","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","selected","_includesInstanceProperty","_forEachInstanceProperty","checkboxRef","String","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","_Promise","all","setInternalValues","setInternalValue","config","isFieldWatched","found","size","getFieldsValues","shouldSkipValidation","validateResolver","forceDelete","handleChange","mutationWatcher","fieldRef","options_1","removeAllEventListeners","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","isSelectInput","handleSubmit","callback","e","preventDefault","persist","fieldErrors","_Object$values","fieldError","focusOnErrorField","formState","commonProps","refOrValidationOptions","prop","watch","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}